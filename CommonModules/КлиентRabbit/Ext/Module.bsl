 // Модуль интеграции с Rabbit с использованием API (серверный вариант)
// Зависимости: 
//    *  КоннекторHTTP: https://github.com/vbondarevsky/Connector
// Автор: Шевченко Иван ()

// Создает обменник на брокере
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   Обменник - Строка - название обменника
// Возвращаемое значение:
//   Строка - ответ от API о результате
//
Функция СоздатьОбменникRabbit(ПараметрыСоединения, Обменник) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("type", "add");
	Данные.Вставить("name", Обменник); 
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/exchange"; 
   	Результат = ПолучитьРезультатGet(URL, Данные);
    Возврат Результат; 
	
КонецФункции

// Удаляет обменник на брокере
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   Обменник - Строка - название обменника
// Возвращаемое значение:
//   Строка - ответ от API о результате
//
Функция УдалитьОбменникRabbit(ПараметрыСоединения, Обменник) Экспорт
  
	Данные = Новый Структура;
	Данные.Вставить("type", "delete");
	Данные.Вставить("name", Обменник);
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/exchange"; 
   	Результат = ПолучитьРезультатGet(URL, Данные);
	Возврат Результат; 
	
КонецФункции

// Создает очередь на брокере
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   НазваниеОчереди - Строка - название очереди
// Возвращаемое значение:
//   Строка - ответ от API о результате
//
Функция ОбъявитьОчередьRabbit(ПараметрыСоединения, НазваниеОчереди) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("type", "add");
	Данные.Вставить("name", НазваниеОчереди);
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/queue"; 
   	Результат = ПолучитьРезультатGet(URL, Данные);
	Возврат Результат;
	
КонецФункции

// Очищает очередь на брокере
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   НазваниеОчереди - Строка - название очереди
// Возвращаемое значение:
//   Число - количество удаленных сообщений
//
Функция ОчиститьОчередьRabbit(ПараметрыСоединения, НазваниеОчереди) Экспорт
	
    Данные = Новый Структура;
	Данные.Вставить("type", "clear");
	Данные.Вставить("name", НазваниеОчереди);
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/queue"; 
   	Результат = ПолучитьРезультатGet(URL, Данные);
	Возврат Результат;
	
КонецФункции

// Удаляет очередь на брокере
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   НазваниеОчереди - Строка - название очереди
// Возвращаемое значение:
//   Число - количество удаленных сообщений
//
Функция УдалитьОчередьRabbit(ПараметрыСоединения, НазваниеОчереди) Экспорт
	
    Данные = Новый Структура;
	Данные.Вставить("type", "delete");
	Данные.Вставить("name", НазваниеОчереди);
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/queue"; 
   	Результат = ПолучитьРезультатGet(URL, Данные);
	Возврат Результат;
	
КонецФункции

// Привязывает очередь к обменнику на брокере
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   НазваниеОчереди - Строка - название очереди 
//   ОбменникДляСвязи - Строка - название обменника
//   МеткаДляСвязи - Строка - название метки (key)
// Возвращаемое значение:
//   Строка - ответ от API о результате
//
Функция ПривязатьОчередьRabbit(ПараметрыСоединения, НазваниеОчереди, ОбменникДляСвязи, МеткаДляСвязи) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("type", "bind");
	Данные.Вставить("name", НазваниеОчереди);
	Данные.Вставить("exchange", ОбменникДляСвязи);
	Данные.Вставить("key", МеткаДляСвязи); 
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/queue"; 
   	Результат = ПолучитьРезультатGet(URL, Данные);
  	Возврат Результат;
	
КонецФункции

// Отправляет сообщение обменнику на брокере через RoutingKey
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   ОбменникДляОтправки - Строка - название обменника 
//   RoutingKey - Строка - название метки (key)
//   Сообщение - Строка - текст сообщения
// Возвращаемое значение:
//   Строка - ответ от API о результате
//
Функция ОтправитьСообщениеКRabbit(ПараметрыСоединения, ОбменникДляОтправки, RoutingKey, Сообщение) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("exchange", ОбменникДляОтправки);
	Данные.Вставить("routingkey", RoutingKey);
	Данные.Вставить("message", Сообщение);
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/send"; 
   	Результат = ОтправитьСообщениеPost(URL, Данные);
	Возврат Результат;	

КонецФункции

// Получает все сообщения из очереди на брокере
//
// Параметры:
//   ПараметрыСоединения - Массив - Название хоста и порт хоста
//   ОчередьДляПолучения - Строка - название очереди 
// Возвращаемое значение:
//   Массив - сообщения из очереди
//
Функция ПолучитьСообщениеRabbit(ПараметрыСоединения, ОчередьДляПолучения) Экспорт
    Данные = Новый Структура;
	Данные.Вставить("queue", ОчередьДляПолучения);  
	Данные.Вставить("login", ПараметрыСоединения[2]);
	Данные.Вставить("token", ПараметрыСоединения[3]);
	ДлиннаяСтрока = "";
	URL = "https://" + ПараметрыСоединения[0] + ":" + ПараметрыСоединения[1] + "/consume"; 
    Результат = ПолучитьРезультатGet(URL, Данные);  
    Возврат Результат;
	
КонецФункции    


Функция ПолучитьРезультатGet(URL, Данные) 
   Возврат КоннекторHTTP.КакТекст(КоннекторHTTP.Get(
   URL, 
   Данные, 
   Новый Структура("ПроверятьSSL", Ложь)));
КонецФункции        

Функция ОтправитьСообщениеPost(URL, Данные)
	Возврат КоннекторHTTP.КакТекст(КоннекторHTTP.Post(
	URL, 
	Данные, 
	Новый Структура("ПроверятьSSL", Ложь)));
КонецФункции

